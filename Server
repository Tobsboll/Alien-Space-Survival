
with Ada.Text_IO;                  use Ada.Text_IO;
with Ada.Integer_Text_IO;          use Ada.Integer_Text_IO;
with Ada.Command_Line;             use Ada.Command_Line;
with TJa.Sockets;                  use TJa.Sockets;
with Ada.Numerics.Discrete_Random; 



procedure Server is
   
   
   --------------------------------------------------
   --Tobias randomgenerator för fiendeskepp
   --------------------------------------------------
   subtype One_To_Twenty is Integer range 1..20;
   
   
   package One_To_Twenty_Random is
      new Ada.Numerics.Discrete_Random(Result_Subtype => One_To_Twenty);
     use One_To_Twenty_Random;
   
   
   --------------------------------------------------
   -- Slut
   --------------------------------------------------
   
   
   
   type Socket_Array is
     array (1..4) of Socket_Type;
   
   
   Socket1, Socket2, Socket3, Socket4 : Socket_Type;
   Sockets : Socket_Array             := (Socket1, Socket2, Socket3, Socket4);
   Listener                           : Listener_Type;
   Num_Players                        : Integer;
   Keyboard_Input                     : Character;
   
   --------------------------------------------------
   World_X_Length : constant Integer := 62;
   World_Y_Length : constant Integer := 30;
   
   type X_Led is array(1 .. World_X_Length) of Character;
   type World is array(1 .. World_Y_Length) of X_Led;
   
   type XY_Type is array(1 .. 2) of Integer;
   type Shot_Type is array (1 .. 5) of XY_Type;
   
   type Ship_spec is 
      record
  	 XY      : XY_Type; 
  	 Lives   : Integer; 
  	 S       : Shot_Type;
      end record;
   
   type Enemy_Ship_Spec is
      record
	 XY                 : XY_Type;
	 Lives              : Integer;
	 Shot               : Shot_Type;
	 Movement_Selector  : Integer; -- så att jag kan hålla koll på vad varje skepp har för rörelsemönster
	                               --, då kan vi ha olika typer av fiender på skärmen samtidigt.
	 Direction_Selector : Integer; -- kanske inte behövs, men håller i nuläget koll på om skeppet är på väg
	                               -- åt höger eller vänster.
	 Active             : Boolean;  
      end record;
   
   
   type Player_Type is
      record
  	 Playing    : Boolean;
  	 Name       : String(1..24);
  	 NameLength : Integer;
  	 Ship       : Ship_Spec;
  	 Score      : Integer;
      end record;
   
   type Enemies is array (1 .. 50) of Enemy_Ship_Spec;
   
   type Game_Data is
      record
  	 Layout   : World;
  	 Player_1 : Player_Type;
  	 Player_2 : Player_Type;
  	 Player_3 : Player_Type;
  	 Player_4 : Player_Type;
  	 Wave     : Enemies;
      end record; 
   --------------------------------------------------
   
   
   
   --------------------------------------------------
   
   --------------------------------------------------
   procedure Add_Player(Listener : in Listener_Type;
			Socket   : in out Socket_Type;
		        Player_Num : in integer) is
      
   begin
      
      Wait_For_Connection(Listener, Socket);
      
      Put("Player ");
      Put(Player_Num, 0);
      Put(" joined the game.");
      New_Line;
      
   end Add_Player;
   --------------------------------------------------
   
   --------------------------------------------------
   procedure Remove_Player(Socket     : in out Socket_Type; 
			   Player_Num : in Integer) is
      
   begin
      
      Close(Socket);
      
      New_Line;
      Put("Player ");
      Put(Player_Num, 0);
      Put(" has left the game");
      
   
   end Remove_Player;
   --------------------------------------------------
   
   --------------------------------------------------
   function Active_Ship(Enemy_Ship : Enemy_Ship_spec) return Boolean is
      
   begin
      
      return Enemy_Ship.Active;
      
   end Active_Ship;
   --------------------------------------------------
   
   --------------------------------------------------
   procedure Update_Enemy_Position(Loop_Counter : in Integer;
			           Ship_Post    : in out Enemy_Ship_Spec) is
      
      -- Movement_selector:
      -- 1) stand still
      -- 2) move from side to side
      -- 3) move forwards
      -- etc.
      
      Start_Position : constant XY_Type := (30,10);
      
   begin -- procedure som tar input och uppdaterar 
      
      
      if Loop_Counter = 0 then -- första gången spawnar skeppet på en angiven startposition.
	                       -- Kan senare ersättas med en startanimation att de flyger ner från
	                       -- toppen eller liknande.
	 
	 Ship_Post.XY := Start_Position;
	 
      end if;
      
      
      -- om movement_selector är 1 så står skeppet still, vilket innebär att koden här helt enkelt hoppas över.
      
      if Ship_Post.Movement_Selector = 2 then -- sida till sida
	 
	 if Ship_Post.Direction_Selector = 1 then -- move right
	    
	    if Ship_Post.XY(1) < (World_X_Length-1) then
               Ship_Post.XY(1) := Ship_Post.XY(1) + 1;
	       
	    elsif Ship_Post.XY(1) = (World_X_Length-1) then
	       Ship_Post.Direction_Selector := 2;   
	    end if;
	    
	 elsif Ship_Post.Direction_Selector = 2 then -- move left
	    
	    if Ship_Post.XY(1) > 1  then
               Ship_Post.XY(1) := Ship_Post.XY(1) -1;
	       
	    elsif Ship_Post.XY(1) = 1 then
	       Ship_Post.Direction_Selector := 1;   
	    end if;
	  
	 end if;
      end if;
      
      
      
      if Ship_Post.Movement_Selector = 3 then
	 
	 Ship_Post.XY(2) := Ship_Post.XY(2) + 1;
	 
      end if;
      
      
   end Update_Enemy_position;
   --------------------------------------------------
   
   --------------------------------------------------
   procedure Enemy_Shots(Shot_Probability : in One_To_Twenty;
			 Enemy_Ship  : in out Enemy_Ship_spec) is
      
   begin -- ska sköta uppdateringen av skeppens koordinater.
      
null;
      
   end Enemy_Shots;
   --------------------------------------------------
   
   --------------------------------------------------
   procedure Print_Player_Input(Sockets : in Socket_Array) is
      
   begin
      
      for I in 1..Num_Players loop
	 
	 Get(Sockets(I), Keyboard_Input); -- får alltid något, minst ett 'o'
	 Skip_Line(Sockets(I));
	 
	 if Keyboard_Input /= 'o' then -- = om det fanns nollskild, giltig input.        
	   
	    New_Line;
	    Put("Player ");
	    Put(I, 0);
	    Put(" pressed: ");
	    
	    if Keyboard_Input = 'w' then Put("Up Arrow");
	    elsif Keyboard_Input = 's' then Put("Down arrow");
	    elsif Keyboard_Input = 'a' then Put("Left arrow");
	    elsif Keyboard_Input = 'd' then Put("Right arrow");
	    elsif Keyboard_input = ' ' then Put("Fire"); 	
	    elsif Keyboard_Input = 'e' then exit; -- betyder "ingen input" för servern.
	    end if;
	 end if;
	 
      end loop;
      
   end Print_Player_Input;
   --------------------------------------------------
   
   
   Game         : Game_Data;
   Loop_Counter : Integer;
   
begin
   
   -- "öppna dörren". För tillfället endast lokalt, ändra sedan.
   Initiate(Listener, Integer'Value(Argument(1)), Localhost => true);
   
   Put_Line("Servern är igång, väntar på connection");
   
   --------------------------------------------------
   --PLAYER SETUP
   --------------------------------------------------
   
   -- vänta på spelare 1
   Add_Player(Listener, Sockets(1), 1);
   
   Get(Sockets(1), Num_Players); -- spelare 1 bestämmer hur många som ska spela.
   
   Put_line("Waiting for players...");
   
   -- lägg till wait_for_connections för så många spelare som angetts!
   for I in 2..Num_Players loop
      
      Add_Player(Listener, Sockets(I), I);
      
   end loop;
   
   New_Line;
   Put("All players have joined the game.");
   
   
   -- Skicka ut ett tecken till alla klienterna, så att de slutar vänta och börjar sin loop.
   for J in 1..Num_Players loop
      
      Put_Line(Sockets(J), Num_Players);
      
   end loop;
   
   Put("Spelet är igång!");
   --------------------------------------------------
   --------------------------------------------------
   
   
   -- Skip_Line;
   
   
   --------------------------------------------------
   --GAME LOOP
   --------------------------------------------------
   
   Loop_Counter := 0;
   
   
   
   loop 
      
      Print_Player_Input(Sockets); -- för test av input
      
      --update world /Andreas
      --update ship /andreas
      
      for I in 1..Game.Wave'Last loop
	 -- för varje skepp i hela vågen
	
	if Active_Ship(Game.Wave(I)) then -- om det finns ett aktivt skepp på den här platsen
					       -- i arrayen med fiendeskepp.
	
	  Update_Enemy_position(Loop_counter, Game.Wave(I)); --/ Tobias
	  
         --  Shot_Probability := Random(G); --ska räkna ut sannolikheten
	                                     -- för att en alien skjuter / Tobias
	  
	--  Enemy_Shots(Shot_Probability, Game.Wave(I)); -- uppdaterar skott /Tobias
	  
	end if;

	   
      end loop;


      -- Skickar information till klienterna. // Eric
      for I in 1..Num_Players loop
	 Put_Data(Sockets(I),Gane);
      end loop;
	    
      Loop_Counter := Loop_Counter + 1;
       
   end loop;
   
   --------------------------------------------------
   --------------------------------------------------
   
   --Efter spelets slut.
   
   for I in 1..Num_Players loop
      
      Remove_Player(Sockets(I), I);
      
   end loop; 
   

end Server;
